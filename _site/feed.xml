<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://dgorhe.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dgorhe.github.io/blog/" rel="alternate" type="text/html" /><updated>2022-10-30T09:45:36-04:00</updated><id>https://dgorhe.github.io/blog/feed.xml</id><title type="html">Know Thyself</title><subtitle>I'm a pathologically curious person and an aspiring data scientist. If you have suggestions, feel free to email me. If any of the information looks incorrect, send me a source to what  you believe is the correct information and I'll take a look and change the post accordingly.</subtitle><entry><title type="html">Using Columbia University’s Ginsburg HPC</title><link href="https://dgorhe.github.io/blog/educational/2022/10/28/How-To-Use-Ginsburg.html" rel="alternate" type="text/html" title="Using Columbia University’s Ginsburg HPC" /><published>2022-10-28T16:00:00-04:00</published><updated>2022-10-28T16:00:00-04:00</updated><id>https://dgorhe.github.io/blog/educational/2022/10/28/How-To-Use-Ginsburg</id><content type="html" xml:base="https://dgorhe.github.io/blog/educational/2022/10/28/How-To-Use-Ginsburg.html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Ginsburg is the name of Columbia University’s newest high performance computing cluster (HPC). As a Data Science Master’s student at the university I’ve been using Ginsburg for my work in the <a href="http://jovanoviclab.com/">Jovanovic Lab</a>. There’s plenty of very basic stuff in <a href="https://confluence.columbia.edu/confluence/display/rcs/Ginsburg%3A+Getting+Started">Ginsburg’s documentation</a>. I want to cover some more involved things which could improve your quality of life while using or developing code, dramatically decrease the amount of time it takes to run code, or make some things feasible which were previously infeasible.</p>

<hr />

<h1 id="create-an-alias-for-interactive-sessions">Create an Alias for Interactive Sessions</h1>
<p>Let’s start with something easy. Oftentimes, we want interactive environments for coding but you need more resources than your local machine has. Ginsburg is useful for this because you can get a <em>lot</em> of resources (hopefully) quickly and at a moments notice. What’s annoying is that the command might look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>srun --pty -t 0-03:00 -A mjlab --mem=64gb -N 1 -c 32 /bin/bash
</code></pre></div></div>

<p>You can look at the <a href="https://confluence.columbia.edu/confluence/display/rcs/Ginsburg+-+Submitting+Jobs#:~:text=shell%20will%20wait.-,Basic%20Job%20Directives,-The%20following%20table">documentation</a> for what each part means, but the bottom-line is that this is extremely annoying to type repeatedly. It’s especially annoying because you probably want the same resources each time you start an interactive session. We can solve this by creating an alias for this command. Open the <code class="language-plaintext highlighter-rouge">.bashrc</code> file in your respective home directory. This file contains a bunch of settings for the shell that Ginsburg shows to you (i.e. the terminal when you login). Use your text editor of choice. In my case, I’ll use vim.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.bashrc
</code></pre></div></div>

<p>The file will look something like this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># .bashrc

# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/burg/opt/anaconda2-2019.10/anaconda2/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/burg/opt/anaconda2-2019.10/anaconda2/etc/profile.d/conda.sh" ]; then
        . "/burg/opt/anaconda2-2019.10/anaconda2/etc/profile.d/conda.sh"
    else
        export PATH="/burg/opt/anaconda2-2019.10/anaconda2/bin:$PATH"
    fi
fi
unset __conda_setup
# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;
</code></pre></div></div>

<p>You can ignore most stuff but toward the top where all the <code class="language-plaintext highlighter-rouge">alias ...</code> commands are, we’ll add our alias. In my case, I’m calling it <code class="language-plaintext highlighter-rouge">sesh</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># .bashrc

# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias sesh='srun --pty -t 0-03:00 -A mjlab --mem=64gb -N 1 -c 32 /bin/bash'

...
</code></pre></div></div>

<p>I’m not showing the remainder of the file again to save some space, but I didn’t change or delete any of it. You can always come back and change this, but think of this as a default. Now when you run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sesh
</code></pre></div></div>

<p>you’ll start an interactive session with all the settings you put in that alias.</p>

<hr />

<h1 id="how-to-avoid-typing-your-password-each-time">How to Avoid Typing Your Password Each Time</h1>
<p>This seems like a pretty pedantic thing, but if you’re logging in and out of Ginsburg all the time, it can get pretty annoying. Fortunately there’s a pretty simple solution. Your computer checks a folder called <code class="language-plaintext highlighter-rouge">~/.ssh/</code> whenever you login via <code class="language-plaintext highlighter-rouge">ssh</code>. Specifically it checks whether a matching key is available on the remote machine. It’s not exactly a copy but the details are not super important.</p>

<h3 id="step-1">Step 1.</h3>
<p>First we want to check if the key is already available</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls ~/.ssh/
</code></pre></div></div>

<p>If the files <code class="language-plaintext highlighter-rouge">id_ed25519</code> and <code class="language-plaintext highlighter-rouge">id_ed25519.pub</code> are already there, skip to <a href="#step-3">Step 3</a></p>

<h3 id="step-2">Step 2.</h3>
<p>Assuming the keys are not there, we’ll generate them with the following command</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -t ed25519
</code></pre></div></div>

<p>Follow the prompts (you can leave everything blank) and it should look something like this.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Generating public/private ed25519 key pair.
Enter file in which to save the key ($HOME/.ssh/id_ed25519):     
Enter passphrase (empty for no passphrase):  
Enter same passphrase again:  
Your identification has been saved in $HOME/.ssh/id_ed25519.
Your public key has been saved in $HOME/.ssh/id_ed25519.pub.
</code></pre></div></div>

<h3 id="step-3">Step 3.</h3>
<p>Now we want to put the public key onto Ginsburg with the following command. Make sure to replace <code class="language-plaintext highlighter-rouge">&lt;UNI&gt;</code> with your actual UNI. This part will still prompt you to put in your password.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat ~/.ssh/id_ed25519.pub | ssh &lt;UNI&gt;@ginsburg.rcs.columbia.edu 'cat - &gt;&gt; ~/.ssh/authorized_keys' 
</code></pre></div></div>

<p>This command basically opens one of the files we just created, sends it over to Ginsburg, and tells Ginsburg to recognize the host computer (i.e. your laptop, desktop, etc) whenever we use <code class="language-plaintext highlighter-rouge">ssh</code>.</p>

<h3 id="step-4">Step 4.</h3>
<p>Double check that everything works by logging out of Ginsburg (you can just type <code class="language-plaintext highlighter-rouge">exit</code> and then hit Enter to leave Ginsburg).</p>

<hr />
<h1 id="performing-multiple-jobs-concurrently">Performing Multiple Jobs Concurrently</h1>
<p>A really common use case in biology labs is performing some time-consuming processing/analysis on multiple files. More generally, sometimes we want to run a program multiple times with different parameters and the inputs of each run are not dependent on the outputs of another run. As a result we don’t care how quickly each thing finishes as long as we don’t have to do them one after another.</p>

<p>I’ve found the easiest way to do this is to create a template bash script and use python to ‘configure’ each template and submit that configuration as a job. I’ll show this with a concrete example.</p>

<h3 id="problem">Problem</h3>
<p>We have a bunch of files called <code class="language-plaintext highlighter-rouge">.bed</code> files. We want to annotate them using a program called <code class="language-plaintext highlighter-rouge">annotator</code>. However, there are 50 files and each file takes 15-20 minutes to run. If we ran them all one after the other it would take 12-16 <em>hours</em> to run. Let’s see how we can submit multiple jobs concurrently.</p>

<h3 id="solution">Solution</h3>
<p>Here is the directory structure of our folder</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── submit_jobs.py
├── submit.sh
└── template.sh
</code></pre></div></div>

<p>Here is the <code class="language-plaintext highlighter-rouge">template.sh</code> file</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/sh
#SBATCH --account=mjlab        
#SBATCH --job-name=annotator-single-run
#SBATCH --cpus-per-task 4
#SBATCH --time=01:00:00            
#SBATCH --mem-per-cpu=20G
 
module load anaconda/2-2019.10
source /burg/opt/anaconda2-2019.10/anaconda2/etc/profile.d/conda.sh
conda activate annotator

annotator --input ${INPUT} --output ${OUTPUT} --gtfdb ${GTFDB} --species hg38
</code></pre></div></div>

<p>The various <code class="language-plaintext highlighter-rouge">#SBATCH</code> lines tell Ginsburg how to identify this job and what kind of resources we want. The middle chunk of lines loads the appropriate version of Anaconda and activates a conda environment we’ve created for the annotator program. Conda is simply a way of creating isolated python containers. Each container is typically only used for one program and it contains only the other programs it depends on to run. So in our case, the old version of annotator requires Python 2.7 and older versions of packages which are stored in the <code class="language-plaintext highlighter-rouge">annotator</code> conda environment.</p>

<p>Here is our file <code class="language-plaintext highlighter-rouge">submit_jobs.py</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import sys
import os 
from argparse import PARSER, ArgumentParser

# Argument parser to decide where to look for inputs, outputs, GTF database, and logs
parser = ArgumentParser()
parser.add_argument("--input", help='Directory containing bed files')
parser.add_argument("--output", help='Directory to write outputs of annotator')
parser.add_argument("--logs", help='Directory to write log files')
parser.add_argument("--gtfdb", help='Location of gtfdb')
args = parser.parse_args()

if __name__ == "__main__":
    # Turn command line arguments into absolute paths
    input = os.path.abspath(args.input)
    output = os.path.abspath(args.output)
    gtfdb = os.path.abspath(args.gtfdb)
    logs = os.path.abspath(args.logs)

    try:
        assert os.path.exists(input) and os.path.exists(output) and os.path.exists(gtfdb) and os.path.exists(logs)
    except AssertionError:
        print("One of the file paths you entered can't be found")
        print("Input absolute path:", input, "\n")
        print("Output path:", output, "\n")
        print("GTFDB absolute path:", gtfdb, "\n")
        print("Logs absolute path:", logs, "\n")
        sys.exit(0)
        
    
    # Create lists of absolute paths for inputs and outputs
    bed_files = [os.path.join(input, f) for f in os.listdir(input)]
    output_files = [os.path.join(output, os.path.basename(bed).split(".")[:-1][0]) + ".txt" for bed in bed_files]

    # Iterate through each combination of bed file and output file and submit a job
    for bed, out in zip(bed_files, output_files):
        # Take the bed file name, strip the .bed extension and replace it with .log
        logfile = os.path.basename(bed).split('.')[:-1][0] + ".log"
        
        # Turn logfile into an absolute path
        logpath = os.path.join(logs, logfile)
        
        # Build command in components
        command = "sbatch "
        command += f"-A mjlab "
        command += f"-o {logpath} "
        command += f"--export=INPUT={bed},OUTPUT={out},GTFDB={gtfdb} "
        command += f"template.sh"
        os.system(command)
</code></pre></div></div>
<p>At the top we initialize an argument parser to read in some command line arguments. Then we check if the file paths that were put in are actual file paths. We then perform some string manipulation to rename the output files as <code class="language-plaintext highlighter-rouge">.txt</code> versions of the original file names. Finally, in the main for-loop, we construct a command line command as a string for each bed file we want to annotate. This line is the most important.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>command += f"--export=INPUT={bed},OUTPUT={out},GTFDB={gtfdb} "
</code></pre></div></div>

<p>Notice that <code class="language-plaintext highlighter-rouge">INPUT</code>, <code class="language-plaintext highlighter-rouge">OUTPUT</code>, and <code class="language-plaintext highlighter-rouge">GTFDB</code> are the same variables we specfied in our <code class="language-plaintext highlighter-rouge">template.sh</code> script.</p>

<p>Here is an example of the <code class="language-plaintext highlighter-rouge">submit.sh</code> file</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ROOT="/burg/mjlab/users/ew2579/"

python submit_jobs.py \
	--input "$ROOT/spidr/encode_data/downsampled_peaks_filtered" \
	--output "$ROOT/darvesh_annotator/output/encode/downsampled_peaks_filtered" \
	--logs "$ROOT/darvesh_annotator/logs/encode/downsampled_peaks_filtered" \
	--gtfdb "$ROOT/spidr/reference_files/gencode.v41.annotation.gtf.db"
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ROOT</code> is specified at the top to save some typing. The final command to run this would be the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash submit.sh
</code></pre></div></div>

<h3 id="outcome">Outcome</h3>
<p>This would run the <code class="language-plaintext highlighter-rouge">python</code> command with the proper arguments for all the directory paths. The python program in turn creates various batch jobs by parsing each file in the directory. The various batch jobs are independent of one another so they’re all running separately. The result is that what would’ve taken 12-16 hours now only takes 30 to 45 minutes to run.</p>

<hr />
<h1 id="building-custom-singularity-containers">Building Custom Singularity Containers</h1>
<p>Containers are like miniature computers inside your computer that can package your application in a very isolated way. Ginsburg like most HPCs does not allow users to build or run Docker containers which is the most popular containerization software. This is mainly because Docker requires root privileges on the computer which is risky on a shared resource like an HPC.</p>

<h3 id="step-1-1">Step 1.</h3>
<p>First we want to create a singularity container to contain all the dependencies of our project since it uses both R and Python. In our case, there is an existing Docker container which can do this. We want to build the container on our local machine. Go to the directory with the <code class="language-plaintext highlighter-rouge">Dockerfile</code> and run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker build . -t &lt;tag name&gt;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;tag name&gt;</code> is whatever tag you want to use to easily identify your container.</p>

<h3 id="step-2-1">Step 2.</h3>
<p>Save the image as a <code class="language-plaintext highlighter-rouge">tar</code> file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker save &lt;tag name&gt; -o &lt;filename&gt;.tar
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;tag name&gt;</code> is the same <code class="language-plaintext highlighter-rouge">&lt;tag name&gt;</code> from <a href="#step-2-1">Step 2</a> and <code class="language-plaintext highlighter-rouge">filename</code> is whatever you want your output file to be called. If I used <code class="language-plaintext highlighter-rouge">darveshgorhe/secat-dev</code> as my tag name and <code class="language-plaintext highlighter-rouge">secat</code> as my filename I would run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker save darveshgorhe/secat-dev -o secat.tar
</code></pre></div></div>

<h3 id="step-3-1">Step 3.</h3>
<p>Upload the <code class="language-plaintext highlighter-rouge">tar</code> file to Ginsburg using <code class="language-plaintext highlighter-rouge">scp</code>. You can also use the Globus tool to upload the <code class="language-plaintext highlighter-rouge">tar</code> file wherever you want.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp &lt;filename&gt;.tar '&lt;UNI&gt;@ginsburg.rcs.columbia.edu:&lt;path to store tar file&gt;'
</code></pre></div></div>

<h3 id="step-4-1">Step 4.</h3>
<p>On Ginsburg, build your container from the tar file as a sandbox container</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>singularity build --sandbox &lt;sandbox name&gt; docker-archive://&lt;filename&gt;.tar
</code></pre></div></div>

<hr />
<h1 id="developing-a-python-package-on-ginsburg">Developing a Python Package on Ginsburg</h1>
<p>I’ve recently been trying to improve a package called <a href="https://github.com/grosenberger/secat">SECAT</a> for analyzing SEC-SWATCH Mass Spectrometry data. The package requires a lot of memory and compute to run in a reasonable amount of time. Specifically it requires more memory than I have available on my computer and it heavily utilizes multiprocessing to parallelize parts of the code. What might take hours on a local machine can be done in less than 20 minutes on the computer. Since I’m editing the code very often, hours long runs are impractical. How can we use Ginsburg to solve this problem?</p>

<h3 id="step-1-2">Step 1.</h3>
<p>Make sure you have a singularity sandbox container with all the proper dependencies. If you’re not sure how to make one, look at the <a href="#building-custom-singularity-containers">previous section</a>.</p>

<h3 id="step-2-2">Step 2.</h3>
<p>Install the python package you want in editatable mode. Editable mode tells your Python interpreter to look at the folder you specified rather than the default location of your packages. First clone what ever repository you want with</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone &lt;git repository link&gt;
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install --editable .
</code></pre></div></div>

<p>Ideally you want to do this in the same directory as your sandbox so the file tree might look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sandbox
├── bin -&gt; usr/bin
├── boot
├── dev
├── ...
python_package
├── Dockerfile
├── LICENSE
├── README.md
├── ...
</code></pre></div></div>

<h3 id="step-3-2">Step 3.</h3>
<p>Check that the sandbox + editable python package works properly. In my case I would edit some of the help documentation and then type in <code class="language-plaintext highlighter-rouge">singularity exec sandbox secat --help</code> to ensure that everything was installed properly. If it works you should see your changes reflected in the output of your command. Just running the program could also be a good way to check, but make sure your edits are reflected in the program’s execution. Deleting an import and checking if it works is another quick way to check.</p>

<h1 id="glossary">Glossary</h1>
<p><em>Host Machine</em>: The machine you’re logging into Ginsburg from. This is probably a laptop or desktop computer. You could also login via another server, but this is usually unlikely.</p>

<p><em>Remote Machine</em>: This is Ginsburg in our case. But generally, it’s a computer that you want to access from a distance over a network (not necessarily the internet).</p>]]></content><author><name></name></author><category term="educational" /><summary type="html"><![CDATA[Introduction Ginsburg is the name of Columbia University’s newest high performance computing cluster (HPC). As a Data Science Master’s student at the university I’ve been using Ginsburg for my work in the Jovanovic Lab. There’s plenty of very basic stuff in Ginsburg’s documentation. I want to cover some more involved things which could improve your quality of life while using or developing code, dramatically decrease the amount of time it takes to run code, or make some things feasible which were previously infeasible.]]></summary></entry><entry><title type="html">Redefining-Education: How Can We Change the Meta-constraints?</title><link href="https://dgorhe.github.io/blog/education/2022/08/24/Redefining-Education.html" rel="alternate" type="text/html" title="Redefining-Education: How Can We Change the Meta-constraints?" /><published>2022-08-24T16:00:00-04:00</published><updated>2022-08-24T16:00:00-04:00</updated><id>https://dgorhe.github.io/blog/education/2022/08/24/Redefining-Education</id><content type="html" xml:base="https://dgorhe.github.io/blog/education/2022/08/24/Redefining-Education.html"><![CDATA[<h2 id="scope">Scope</h2>
<ul>
  <li>K-12 education</li>
  <li>No higher education</li>
  <li>Should apply to all grades but…</li>
  <li>Some advice is more applicable/specific to high school</li>
  <li>Going to explain ideas at multiple levels of depth</li>
  <li>Each level of depth discusses further n-th order effects and more subtle considerations</li>
</ul>

<h2 id="list-of-ideas">List of ideas</h2>
<p>The 5 ideas I propose are as follows:</p>
<ul>
  <li>Teachers as advisors versus lecturers</li>
  <li>Setting clear numeracy goals</li>
  <li>Fixed-value per student voucher system</li>
  <li>Testing as a means of progression</li>
  <li>Mandatory rotational programs for students</li>
</ul>

<h2 id="surface-level-explanation">Surface Level Explanation</h2>
<h3 id="teachers-as-advisors-versus-lecturers">Teachers as advisors versus lecturers</h3>
<p>PhDs are valued because much of the work by the candidate is done asynchronously and independently. The internet is also filled with high quality instruction/lectures on a wide variety of topics. A teacher shouldn’t be repeating the same material over and over to different students, we have the internet for that. Instead, teachers should be advisors to students in order to spend high-quality time with them even if that time is less in quantity per child.</p>

<ul>
  <li>Need to run the math on how this plan would affect number of teachers</li>
</ul>

<h3 id="setting-clear-numeracy-goals">Setting clear numeracy goals</h3>
<p>We have a clear language for describing literacy among children. We can discretize students’ reading ability by grade level. It’s not a perfect system, but at least it’s directionally helpful. A particular student at a 3rd grade reading level may know more than a particular student at a 4th grade reading level. However, a student at a 12th grade reading level can almost assuredly read better than a student at a 4th grade reading level. We should create a similar metric for math called numeracy. Basically, at what is a child’s aptitude to manipulate and transform numerical concepts?</p>

<h3 id="fixed-value-per-student-voucher-system">Fixed-value per student voucher system</h3>
<p>Each school gets some fixed amount per student they enroll. They are free to charge anything above that amount. But there’s a minimum guaranteed amount regardless of property tax and year-to-year fluctuations.</p>

<h3 id="testing-as-a-means-of-progression">Testing as a means of progression</h3>
<p>Every student should always be able to test out of any course at any time. The earlier they test out relative to their age, the stricter the cutoff (i.e. higher percentage needed to pass). They can get multiple attempts, but fixed number per time window. If there are expected ages for the courses, the student will have to re-test in order to not remediate back to that class. In other words, the student has to demonstrate that they retained the knowledge for the course they tested out of early.</p>

<h3 id="mandatory-rotational-programs-for-students">Mandatory rotational programs for students</h3>
<p>This primarily applies to high schools. Before graduating, I believe half the time should be spent rotating through various types of positions. This connects with the voucher system since this can be used to incentivize employers to take on students through rotation programs. Students and parents may sign a release form for some physical labor, but there would need to exist some state-level restrictions since this could become a perverse incentive for cheap labor for hazardous work.</p>

<hr />
<h2 id="slightly-deeper-explanation">Slightly Deeper Explanation</h2>
<h3 id="teachers-as-advisors-versus-lecturers-1">Teachers as advisors versus lecturers</h3>
<h3 id="setting-clear-numeracy-goals-1">Setting clear numeracy goals</h3>
<h3 id="fixed-value-per-student-voucher-system-1">Fixed-value per student voucher system</h3>
<h3 id="testing-as-a-means-of-progression-1">Testing as a means of progression</h3>
<h3 id="mandatory-rotational-programs-for-students-1">Mandatory rotational programs for students</h3>

<hr />
<h2 id="deep-explanation">Deep Explanation</h2>
<h3 id="teachers-as-advisors-versus-lecturers-2">Teachers as advisors versus lecturers</h3>
<h3 id="setting-clear-numeracy-goals-2">Setting clear numeracy goals</h3>
<h3 id="fixed-value-per-student-voucher-system-2">Fixed-value per student voucher system</h3>
<h3 id="testing-as-a-means-of-progression-2">Testing as a means of progression</h3>
<h3 id="mandatory-rotational-programs-for-students-2">Mandatory rotational programs for students</h3>]]></content><author><name></name></author><category term="education" /><summary type="html"><![CDATA[Scope K-12 education No higher education Should apply to all grades but… Some advice is more applicable/specific to high school Going to explain ideas at multiple levels of depth Each level of depth discusses further n-th order effects and more subtle considerations]]></summary></entry><entry><title type="html">Beyond Bitcoin: How to Implement Decentralized Societies</title><link href="https://dgorhe.github.io/blog/decentralization/2022/01/07/Beyond-Bitcoin.html" rel="alternate" type="text/html" title="Beyond Bitcoin: How to Implement Decentralized Societies" /><published>2022-01-07T12:10:00-05:00</published><updated>2022-01-07T12:10:00-05:00</updated><id>https://dgorhe.github.io/blog/decentralization/2022/01/07/Beyond-Bitcoin</id><content type="html" xml:base="https://dgorhe.github.io/blog/decentralization/2022/01/07/Beyond-Bitcoin.html"><![CDATA[<h2 id="preamble">Preamble</h2>
<p>I’m writing this out of self-interest as well as a desire to push technological progressivism. As <a href="https://balajis.com/the-purpose-of-technology/">Balaji Srinivasan put it in 2013</a>:</p>

<blockquote>
  <p>We need to consciously build a parallel tech-driven decentralized media ecosystem, and we need it to become the first point of call for anyone seeking to learn about technology.</p>
</blockquote>

<p>While I disagree with some of Balaji’s <a href="https://www.wired.com/2013/11/software-is-reorganizing-the-world-and-cloud-formations-could-lead-to-physical-nations/">opinions on the physical manifestations of social networks</a>, it’s obvious that software is subsuming peoples’ time and attention. Balaji has a particular idea that I want to focus on, that of <a href="https://1729.com/how-to-start-a-new-country">starting a new non-contiguous country</a>. He leaves the implementation details to the readers’ imagination so in this post we’ll expound upon this idea with a concrete implementation. To the chagrin of many tech evangelists, we cannot wholly extricate our physical existence to the cloud no matter how cheap the EC2 instances become. Nonetheless, we can exercise agency in how and where technology will take our time, resources, and agency.</p>

<p>Specifically we’re going to examine how to keep record of the physical citizens of <em>any</em> polity, digital or physical. There are a plethora of fascinating topics to discuss for decentralized societies such as food supply, delineation of trade routes, addressing natural disasters, etc. I’m choosing this topic because it’s by definition the entry point of every human into any society. Those other topics may be the focus of future blog posts.</p>

<h2 id="background---conceptualizing-daos">Background - Conceptualizing DAOs</h2>
<blockquote>
  <p>A blockchain is a growing list of records, called blocks, that are linked together using cryptography.</p>
</blockquote>

<blockquote>
  <p>A decentralized autonomous organization (DAO)… is an organization represented by rules encoded as a computer program that is transparent, controlled by the organization members and not influenced by a central government.</p>
</blockquote>

<p>The title mentions the term DAO, but let’s relate DAOs to existing terminology to form a better intuition. We can view DAOs as an anarchic polity or a direct democracy. DAOs can be considered anarchic because there is no centralized control and no individual actually has to participate in any DAO - the null is zero participation. However, whenever people do partcipate everyone, by design, has an equal say at the start. As such it can be viewed as a direct democracy. A more colloquial example to conceptualize DAOs would be any sort of online group that exerts some authority. A recent example would be influence of the <a href="https://reddit.com/r/wallstreetbets">WallStreetBets subreddit</a> on the price of GameStop stock in 2021. They were a loosely organized coalition that had some rules, albeit not transparent, encoded in the subreddit. Ultimately, the users decided how they wanted to exercise their stock trades and call options for GameStop, but the group itself had some concerted, measureable effect on the market. These analogies will always be inexact, but the point is to help triangulate the term DAO within our existing lexicon.</p>

<h2 id="thesis">Thesis</h2>
<p>Ok so I’ve been rambling about <em>why</em> I’m writing this but <em>what</em> is this about? It’s simply this idea:</p>

<blockquote>
  <p>What if we had a system of governance where each birth and death was put on a blockchain and people could join DAOs of various scales based on the institutions in which they want to have a say?</p>
</blockquote>

<h2 id="why-should-we-care">Why Should We Care?</h2>
<p>We should care about this because many aspects of society require identification and there is often too much friction in the existing centralized infrastructure. Certain data should be anonymized wherever we deem necessary, but we shouldn’t throw the baby out with the bath water. Complete anonymity of every citizen would make society untenable. Driving on roads, flying on a plane, starting a business all require us to prove that we are who we say we are - and that should continue to be the case. Government identification works fine, but there are flaws. A core issue is that governments want to create identification that is physically mass producible but difficult to forge. The more complicated and expensive your passport becomes, the less accessible it becomes to the populous (subsidized or not). We would like to have an opt-in system that addresses this core issue such that citizens would feel compelled to opt-in to the new system or at worst, both the old and new system. This is where blockchains come into the picture.</p>

<p>Let’s say you’re a new parent and your home town has a blockchain of birth records. Your child’s birth would be stored on there, immutably. You don’t have to worry if the hospital closes or you lose the birth certificate, the record of your child always exists. This birth record would enable you as parents to automatically be given access to votes related to child safety, education, etc. At larger scales, your vote gets correspondingly diluted, but the consequences of your votes become more impactful. To extend the education analogy, parents might have a more diluted influence in the education policy of North America but the scope of influence would be beyond that of the home town DAO.</p>

<p>We could even extend this to global governance. Imagine if we could vote on climate change issues globally? Stupidity is high-entropy when things are left to an open choice. “What should we do about climate change?” is different than, “Should we do X or Y about climate change?”. In the former, people proactively propose solutions whereas the latter is a false choice often promulgated by governments. Imagine policy debates that reinforce the minimization of posturing. Citizens could waste time posturing to appear to do something, or reach out to other factions and reach a consensus. A DAO based system would incentivize the latter but not necessarily prevent the former. Factions that are apathetic about climate change <em>would have to actively organize to convince other voters to abstain from voting</em>. Similarly, DAO members could spend their time convincing members to leave to increase the voting power of a single vote, but that costs time and energy. These are all downstream effects of things built on top of this birth record system, but could we actually put <em>all</em> births on a blockchain? There’s a lot of babies born so this is a non-trivial question.</p>

<h2 id="feasibility-in-a-proof-of-work-system">Feasibility in a Proof-of-Work System</h2>
<p>Let’s talk about the technicalities of this. How can we determine if all births can be put on a blockchain? How do we get from birth records to DAOs and global governance?</p>

<h3 id="block-design">Block Design</h3>
<p>Around <a href="https://www.theworldcounts.com/stories/How-Many-Babies-Are-Born-Each-Day">385,000 babies are born per day</a>. If we assume there rate is constant this means approximately 2,674 babies are born every 10 minutes. I’m using 10 minutes because by default that’s how often a block is written for <a href="https://github.com/bitcoin/bitcoin">bitcoin</a>. Each block has a theoretical <a href="https://github.com/bitcoin/bitcoin">4mb limit</a>. Let’s imagine the following very basic example mocked up in TypeScript.</p>

<figure class="highlight">
  <pre><code class="language-typescript" data-lang="typescript"><span class="kd">const</span> <span class="nx">block</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="nx">uuid</span><span class="p">;</span>
    <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">parents</span><span class="p">:</span> <span class="nx">uuid</span><span class="p">[];</span>
    <span class="nl">custody</span><span class="p">:</span> <span class="nx">LinkedList</span><span class="o">&lt;</span><span class="nx">uuid</span><span class="o">&gt;</span><span class="p">;</span>
    <span class="nl">lat</span><span class="p">:</span> <span class="nx">BigInt</span><span class="p">;</span>
    <span class="nl">lon</span><span class="p">:</span> <span class="nx">BigInt</span><span class="p">;</span>
<span class="p">}</span></code></pre>
</figure>

<p>We’ll discuss optional parameters in the following section.</p>

<h3 id="block-size">Block Size</h3>
<p>Typically, a <code class="language-plaintext highlighter-rouge">uuid</code> is represented by 32 hexadecimal characters and 4 hyphens. Let’s assume 4 bits per character so 144 bits total so far. For <code class="language-plaintext highlighter-rouge">name</code>, let’s be liberal and use <code class="language-plaintext highlighter-rouge">UTF-32</code> which has a fixed length and takes 32 bits per character (how else are we going to store Elon’s son’s name, X Æ A-Xii). We’ll arbitrarily limit names to 50 characters so 1600 bits. It’s important to differentiate custody and parenthood since they can often be decoupled. <code class="language-plaintext highlighter-rouge">parents</code> only includes biological parents (2 uuids so 288 bits). With <code class="language-plaintext highlighter-rouge">custody</code> we have an issue. We want to accomodate as many entries as necessary but we can’t accomodate an infinite number of custody changes. Putting an upper bound might be harmful to children if the terminal custodian is abusive or absent. We could use foster care data to determine the maximum number of custodial changes or the 99.9th percentile of custodial changes. For now, we’ll arbitrarily limit this to 18 custodians which I base on having 2 new custodians every 2 years until the child is 18 years old. This amounts to 18 uuids so 2,592 bits. <code class="language-plaintext highlighter-rouge">BigInt</code> can store up to 64 bits so <code class="language-plaintext highlighter-rouge">lat</code> and <code class="language-plaintext highlighter-rouge">lon</code> together take up 128 bits. All together we have 144 + 288 + 2,592 + 1600 + 128 = 4,752 bits. This is the equivalent of 594 bytes. 594 bytes times 2,674 = 1,588,356 bytes = 1.588 mb. Okay, so we know there is no fundamental limitation to this approach even using something as intensive as proof-of-work as the basis for our blockchain.</p>

<p>We could add more required or optional items to each block since we have headroom. We might want more attributes so it’s easier for a person to rediscover their id. Specifically with the <code class="language-plaintext highlighter-rouge">id</code> attribute, I believe the most sustainable way would be to create a hash based on the most variable parts of human DNA in addition to a corneal scan or fingerprint (to account for identical twins). A newborn’s data would be collected, the hash is generated and if someone needs to rediscover their block, they can resequence their DNA and take a new corneal scan or fingerprint scan. Other redundant biological hashes would need to be developed for people with birth defects.</p>

<p>As long as there is no consistent backlog of births, spikes in birth rate are fine (we just postpone writing them to a block for a few block durations). A proof-of-stake model could be even more amenable to this task although I’m less familiar with the inner workings of proof-of-stake systems.</p>

<h3 id="caveats">Caveats</h3>
<p>I mentioned the custody caveat and biological hash, but there are some other caveats to keep in mind. Namely, we assumed birth rates are consistent and will remain consistent. We have a ton of headroom so I don’t see this as a real issue. If anything the size of the block should increase to enable more features. If we wanted a more accurate determination, we could look at a histogram of births every 10 minutes across a wide variety of hospitals and areas. From this we could simply use the sum of largest values plus some buffer or some other liberal estimate. I wasn’t able to find a dataset this granular, but if someone knows of such a dataset, please let me know. Hard forks would be another issue since it’s quite likely people will want to change the design of blockchains as time goes on. We could also imagine some fields I listed being empty and thus optional. What if you don’t know who the parents are? We could amend biological hashes such that your hash will always equal the hash of your parents and thus we could reconstruct a family tree. The ethical issues of that decision should be left to individual DAOs. Competing hash functions would likely arise based on peoples’ privacy tolerance. There is also the issue that a child’s inclusion in at least 1 DAO is entirely decided by their parents or initial custodians. I could go on and on, but I don’t think any of these issues are a dealbreaker. The nature of a DAO based system would offer competing solutions and tradeoffs. DAOs are not a panacea.</p>

<h2 id="transitioning-to-dao-based-society">Transitioning to DAO Based Society</h2>
<p>Beyond the technical challenges facing DAO creation, there is an obvious social component to this transition. What is non-technical core product value of these systems for new users? What incentive is there for an existing person to onboard to this new system? There are advantageous side-effects of creating a biological hash for older citizens. It’s a good way to collect data for personalized medicine. Older people have more complicated ailments and subsidizing genome sequencing could help bolster a database (blockchain or otherwise) of genomes to better research and address these ailments. Moreover, when people die this would be an immutable record of their identity which loved ones could use to resolve legal disputes. Families with children on the way could opt-in to the system knowing that their parenthood and custody is being recorded immutably. Other authentication technologies would be built on top of this system which might end up displacing passports and identification cards for people of all ages. The case to opt-in is weakest for young adults with no families. The most important demographics to focus on would be new parents and immigrants (at least for legal immigration). The best case scenario is that we onboard a majority of new parents within 1 generation. Realistically we would not expect Facebook or Twitter levels of growth, nor should that be the goal. However, we should imbibe the platform lessons from Facebook and Twitter - deliver core product value and everything else will fall into place.</p>

<h2 id="consequences">Consequences</h2>
<h3 id="immutable-store-of-people">Immutable Store of People</h3>
<p>We have all these blocks, so what? Now we have an immutable store of people born. We could similarly create a blockchain for deaths based on death certificates. The difference between the set of birth ids and the set of ids in the death blockchain is the number of people alive. This forms the basis of token dissemination for the aforementioned organizations. A town could decide that anyone born at a certain group of hospitals is automatically added to the town’s DAO. Citizenship would be optional but it could remain exactly as it is now. Being a part of a nation-state is a choice not a prerequisite. You could avoid joining any DAO but that would be a choice you have to make.</p>

<h3 id="built-in-redundancy">Built-in Redundancy</h3>
<p>Blockchains are relatively safe from fraud by design. Similarly, natural disasters pose less risk to blockchains since they are distributed. Municipalities could also have redundant chains on the cloud to provide additional security. The cost of fabricating a block for a DAO would be too demanding, even for a cloud provider.</p>

<h3 id="built-in-diversity-equity-and-inclusion">Built-in Diversity, Equity, and Inclusion</h3>
<p>There is no information about one’s race, sex, gender, etc. in the block. If your id exists and you are not dead, your vote counts. To be fair, a real issue would be if people are denied a birth block on the basis of these characteristics. What if Uighurs in China are denied person-hood from birth on the basis of their family’s religion? Then again, keeping track of people in a separate database uses a lot of time and energy. At that point people have to wonder, what’s in it for me? Unlike a lot of bitcoin maximalists and decentralization diehards, I do not think blockchains are the solution to these fundamental moral quandries. It’s totally possible for a totalitarian state to suppress DAOs permanently. DAOs are simply organizations with different trade-offs, ones that I think are more amenable to a highly automated society but prone to human folly just like everything else.</p>

<h2 id="voting">Voting</h2>
<p>Leaving a DAO would increase the voting power of each share but not by much. Similarly, joining a DAO does not significantly dilute each member’s voting power. A one token one vote method could be used but there are also other methods like <a href="https://vitalik.ca/general/2019/12/07/quadratic.html">quadratic payments</a>. Entities could enact whatever voting rules they want but they would have to balance the risks/benefits of losing voters versus gaining voters for their cause. Perhaps smaller DAOs could have deals with larger DAOs to make changes but those changes are contingent upon having a minimum number of voters. Again, this <em>may</em> be linked to geography but it does not <em>have to</em> be linked to geography.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Decentralization is more than just bitcoin. Aren’t you so sick of hearing the same buzzwords and explanations over and over again? “Bitcoin is like digital gold”, “It’s a ledger that governments can’t control” and on and on. We should demand some tangible core product value from blockchains beyond new toys for financial arbitrage. We should be asking for things like cryptocurrency based payroll so we can get paid on a daily or even hourly basis. We should ask for logistics to be a series of smart contracts where changes in warehouse capacity automatically triggers a change in purchase orders. For every dotcom era company we remember today there were dozens that were total nonsense and rightfully called out for being so. Bitcoin might Java Applets and JavaScript might be right under our noses.</p>

<h2 id="addendum">Addendum</h2>
<p>I want to address probably the best set of criticisms against crypto-adjacent topics. There was a video by Folding Ideas titled Line Goes Up - The Problem With NFTs where he lambasts the idea of crypto currency. He cites the speculative nature of crypto as a continuation of the post 2008 financial crisis and the case is very compelling. Relevant to this posts, he unequivocally rejects the idea of crypto token based governance.</p>

<blockquote>
  <p>“… while the claim is that these machines will democratize the internet, the technical complexity they add, the new speciailized programming expertise that they require, concentrates a lot of power in the hands of people who can build the templates that in turn enable non-programmers to actually use it.”</p>
</blockquote>

<p>What I’m proposing here is different because I don’t think I’m proposing a template for DAOs themselves. I’m suggesting that digitizing identities in a robust, seamless way will allow variegated DAOs to emerge. Identification is also a very well understood interface between the analog and digital world so I think average people could wrap their heads around this aspect in particular. Perhaps I’m buying into the decadent ideas put forth by cryto-evangelists but I don’t think I am. Please correct me if I’m wrong. I don’t want to get too far into this criticism, but I can dive deeper if anyone wants.</p>

<!-- Balaji -->]]></content><author><name></name></author><category term="decentralization" /><summary type="html"><![CDATA[Preamble I’m writing this out of self-interest as well as a desire to push technological progressivism. As Balaji Srinivasan put it in 2013:]]></summary></entry></feed>